(mergesort
 (merge_TCC1 0
  (merge_TCC1-1 nil 3779956379 ("" (subtype-tcc) nil nil) nil nil))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3779956379 ("" (subtype-tcc) nil nil) nil nil))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3779956379 ("" (termination-tcc) nil nil) nil nil))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3779956379 ("" (termination-tcc) nil nil) nil nil))
 (merge_size 0
  (merge_size-1 nil 3780068405 ("" (postpone) nil nil) nil shostak))
 (merge_is_permutation 0
  (merge_is_permutation-1 nil 3780158715 ("" (postpone) nil nil) nil
   shostak))
 (merge_sort_TCC1 0
  (merge_sort_TCC1-1 nil 3779956379 ("" (subtype-tcc) nil nil) nil
   nil))
 (merge_sort_TCC2 0
  (merge_sort_TCC2-1 nil 3779956379 ("" (termination-tcc) nil nil) nil
   nil))
 (merge_sort_TCC3 0
  (merge_sort_TCC3-1 nil 3779956379 ("" (termination-tcc) nil nil) nil
   nil))
 (merge_sort_is_permutation 0
  (merge_sort_is_permutation-3 "new" 3780174900
   ("" (measure-induct "length(l)" (l))
    (("" (skeep)
      (("" (expand merge_sort 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (inst?)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (expand "permutations")
              (("2" (skeep)
                (("2" (lemma "merge_occurrence")
                  (("2" (inst?)
                    (("2" (replaces -1)
                      (("2"
                        (inst-cp -1 "prefix(x, floor(length(x) / 2))")
                        (("2" (split)
                          (("1" (inst? -1)
                            (("1" (rewrite -1 -2)
                              (("1"
                                (inst?)
                                (("1"
                                  (split)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma occurrences_of_app)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -2)
                                                (("1"
                                                  (replace -1 2 rl)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (lemma
                                                       app_prefix_suffix)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "x"
                                                         "floor(length(x) / 2)")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2
                                                           rl)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma merge_sort_size)
                                      (("2"
                                        (inst
                                         -1
                                         "suffix(x, floor(length(x) / 2))")
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma length_suffix)
                                              (("2"
                                                (inst
                                                 -1
                                                 "x"
                                                 "floor(length(x) / 2)")
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -1 "suffix(x, floor(length(x) / 2))")
                            (("2" (split)
                              (("1"
                                (inst?)
                                (("1"
                                  (replace -1 3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (lemma length_prefix)
                                        (("1"
                                          (inst
                                           -1
                                           "x"
                                           "floor(length(x) / 2)")
                                          (("1"
                                            (replace -1 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma merge_occurrence)
                                (("2"
                                  (inst
                                   -1
                                   "merge_sort(prefix(x, floor(length(x) / 2)))"
                                   "merge_sort(suffix(x, floor(length(x) / 2)))"
                                   "x_1")
                                  (("2"
                                    (replace -1 4 rl)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (lemma length_suffix)
                                        (("2"
                                          (inst
                                           -1
                                           "x"
                                           "floor(length(x) / 2)")
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (lemma length_prefix)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "x"
                                                   "floor(length(x) / 2)")
                                                  (("2"
                                                    (replace -1 2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (T formal-type-decl nil mergesort nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (prefix def-decl "list[T]" sorting_aux nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (suffix def-decl "list[T]" sorting_aux nil)
    (length_prefix formula-decl nil sorting_aux nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_suffix formula-decl nil sorting_aux nil)
    (merge_sort_size formula-decl nil mergesort nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (app_prefix_suffix formula-decl nil sorting_aux nil)
    (occurrences_of_app formula-decl nil sorting_aux nil)
    (merge_occurrence formula-decl nil mergesort nil))
   shostak)
  (merge_sort_is_permutation-2 "" 3780053176
   ("" (measure-induct "length(l)" (l))
    (("" (skeep)
      (("" (expand merge_sort 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (inst?)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil)
             ("2" (inst -1 "x")
              (("2" (split)
                (("1" (expand merge_sort -1)
                  (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (expand permutations)
                  (("2" (skeep)
                    (("2" (lemma merge_is_permutation)
                      (("2" (inst?)
                        (("2" (expand permutations)
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (replace -1 3)
                                (("2"
                                  (lemma occurrences_of_app)
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (replace -1 3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (expand merge_sort 2)
                                            (("2"
                                              (lift-if)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (prop)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         length_suffix)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x"
                                                           "floor(length(x) / 2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (prop)
                                                                (("1"
                                                                  (grind)
                                                                  (("1"
                                                                    (grind)
                                                                    (("1"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    (("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     length_prefix)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "x"
                                                       "floor(length(x) / 2)")
                                                      (("2"
                                                        (lift-if)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           (1 2))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (postpone)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (merge_sort_is_permutation-1 nil 3779956382
   ("" (induct "l")
    (("1" (expand permutations)
      (("1" (skeep) (("1" (grind) nil nil)) nil)) nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (expand permutations)
          (("2" (skeep)
            (("2" (lemma merge_occurrence)
              (("2" (grind)
                (("1" (postpone) nil nil) ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

