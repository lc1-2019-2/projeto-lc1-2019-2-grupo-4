(radix_sort
 (radixsort_permutes 0
  (radixsort_permutes-1 nil 3780310044
   ("" (skeep)
    (("" (expand radixsort)
      (("" (lemma "merge_sort_is_permutation[T, <<]")
        (("" (inst -1 "merge_sort[T, <=](l)")
          (("" (expand permutations)
            (("" (skeep)
              (("" (inst?)
                (("" (grind)
                  (("" (rewrite -1 2)
                    (("" (grind)
                      (("" (lemma "merge_sort_is_permutation[T, <=]")
                        (("" (inst?)
                          (("" (expand "permutations")
                            (("" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (merge_sort_is_permutation formula-decl nil mergesort nil)
    (permutations const-decl "bool" sorting_aux nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (merge_sort def-decl "list[T]" mergesort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (list type-decl nil list_adt nil)
    (radixsort const-decl "list[T]" radix_sort nil))
   shostak))
 (radixsort_sorts_TCC1 0
  (radixsort_sorts_TCC1-1 nil 3777655189
   ("" (typepred "<<" "<=")
    (("" (expand "total_preorder?")
      (("" (expand "preorder?")
        (("" (prop)
          (("1" (hide -2 -3 -5 -6) (("1" (grind) nil nil)) nil)
           ("2" (expand "lex")
            (("2" (expand "transitive?" 1)
              (("2" (skeep)
                (("2" (split -1)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (flatten)
                        (("1" (copy -4)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -6)
                                  (("1"
                                    (inst -6 "y_1" "z" "x_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (copy -6)
                            (("2" (expand "transitive?" -1)
                              (("2"
                                (inst -1 "x_1" "y_1" "z")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "transitive?" -8)
                                    (("2"
                                      (inst -8 "y_1" "z" "x_1")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split -2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (copy -6)
                          (("1" (expand "transitive?" -1)
                            (("1" (inst -1 "x_1" "y_1" "z")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "transitive?" -8)
                                  (("1"
                                    (inst -8 "z" "x_1" "y_1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (copy -8)
                        (("2" (expand "transitive?" -1)
                          (("2" (inst -1 "x_1" "y_1" "z")
                            (("2" (assert)
                              (("2"
                                (expand "transitive?" -13)
                                (("2"
                                  (inst -13 "x_1" "y_1" "z")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (expand "lex")
            (("3" (expand "dichotomous?" 1)
              (("3" (skeep)
                (("3" (hide -2 -5)
                  (("3" (copy -2)
                    (("3" (copy -5)
                      (("3" (expand "dichotomous?" -2)
                        (("3" (inst?)
                          (("3" (prop)
                            (("1" (expand "dichotomous?" -4)
                              (("1"
                                (inst?)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "dichotomous?" -4)
                              (("2"
                                (inst?)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex const-decl "bool" radix_sort nil)
    (reflexive? const-decl "bool" relations nil)
    (transitive? const-decl "bool" relations nil)
    (dichotomous? const-decl "bool" orders nil)
    (preorder? const-decl "bool" orders nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (T formal-type-decl nil radix_sort nil)
    (PRED type-eq-decl nil defined_types nil)
    (total_preorder? const-decl "bool" total_preorder nil)
    (<< formal-const-decl "(total_preorder?[T])" radix_sort nil)
    (<= formal-const-decl "(total_preorder?[T])" radix_sort nil))
   nil))
 (radixsort_sorts 0
  (radixsort_sorts-2 "no" 3780991862
   ("" (skeep)
    (("" (expand is_sorted?)
      (("" (skeep)
        (("" (expand lex)
          ((""
            (case "nth(radixsort(l), 1 + k) << nth(radixsort(l), k)")
            (("1" (lemma "merge_sort_is_sorted[T, <<]")
              (("1" (expand radixsort)
                (("1" (inst -1 "merge_sort[T, <=](l)")
                  (("1" (expand is_sorted?)
                    (("1" (inst -1 "k")
                      (("1" (prop)
                        (("1" (hide -1) (("1" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "merge_sort_is_sorted[T, <<]")
              (("2" (inst -1 "merge_sort[T, <=](l)")
                (("2" (expand is_sorted?)
                  (("2" (inst -1 "k")
                    (("1" (expand radixsort) (("1" (prop) nil nil))
                      nil)
                     ("2" (expand radixsort)
                      (("2" (prop)
                        (("1" (lemma "merge_sort_is_sorted[T, <<]")
                          (("1" (inst -1 "merge_sort[T, <=](l)")
                            (("1" (expand is_sorted?)
                              (("1"
                                (inst -1 "k")
                                (("1" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "merge_sort_is_sorted[T, <<]")
                          (("2" (inst -1 "merge_sort[T, <=](l)")
                            (("2" (expand is_sorted?)
                              (("2"
                                (inst -1 "k")
                                (("2" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (lemma "merge_sort_is_sorted[T, <<]")
                          (("3" (inst -1 "merge_sort[T, <=](l)")
                            (("3" (expand is_sorted?)
                              (("3"
                                (inst -1 "k")
                                (("3" (prop) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (radixsort_sorts-1 nil 3780318182
   ("" (skeep)
    (("" (expand "is_sorted?[T, lex]")
      (("" (skeep)
        (("" (expand radixsort)
          (("" (expand lex)
            (("" (flatten)
              (("" (hide 2)
                (("" (prop)
                  (("1" (expand "merge_sort[T, <<]" 1)
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (expand "merge_sort[T, <<]")
                          (("1" (lift-if)
                            (("1" (prop)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "merge_sort[T, <=]")
                                  (("1"
                                    (lift-if)
                                    (("1"
                                      (prop)
                                      (("1"
                                        (hide (-1 -2))
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (hide (3 4))
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "merge_sort[T, <=]" -1)
                          (("2" (lift-if -1)
                            (("2" (prop)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "merge_sort[T, <=]" -1)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("1" (grind) nil nil)
                         ("2" (expand "merge_sort[T, <=]" -2)
                          (("2" (lift-if)
                            (("2" (prop)
                              (("2"
                                (hide 1)
                                (("2"
                                  (expand "merge_sort[T, <<]" -1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (prop)
                                      (("1"
                                        (lemma
                                         "merge_sort_size[T, <<]")
                                        (("1"
                                          (inst -1 "l")
                                          (("1"
                                            (expand "merge_sort" -1)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

